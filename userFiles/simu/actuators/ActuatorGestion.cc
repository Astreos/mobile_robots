#include "ActuatorGestion.hh"
#include "user_all_id.h"
#include "robot_id.h"

/*! \brief constructor
 * 
 * \param[in] mbs_data Robotran structure
 */
ActuatorGestion::ActuatorGestion(MbsData *mbs_data)
{
	this->mbs_data = mbs_data;

	robot_list.push_back(new ActuatorRobot(mbs_data, ROBOT_B, Right_wheel_joint_B_id, Left_wheel_joint_B_id, Tower_joint_B_id));
	robot_list.push_back(new ActuatorRobot(mbs_data, ROBOT_R, Right_wheel_joint_R_id, Left_wheel_joint_R_id, Tower_joint_R_id));
	robot_list.push_back(new ActuatorRobot(mbs_data, ROBOT_Y, Right_wheel_joint_Y_id, Left_wheel_joint_Y_id, Tower_joint_Y_id));
	robot_list.push_back(new ActuatorRobot(mbs_data, ROBOT_W, Right_wheel_joint_W_id, Left_wheel_joint_W_id, Tower_joint_W_id));
}

/*! \brief destructor
 */
ActuatorGestion::~ActuatorGestion()
{
	for(unsigned int i=0; i<robot_list.size(); i++)
	{
		delete robot_list[i];
	}
}

/*! \brief compute the actuators model
 */
void ActuatorGestion::compute()
{
	compute_torques();
	apply_torques();
}

/*! \brief compute (update) the torques generated by all the wheel motors of all the robots
 */
void ActuatorGestion::compute_torques()
{
	for(unsigned int i=0; i<robot_list.size(); i++)
	{
		robot_list[i]->compute_torques();
	}
}

/*! \brief apply the torques generated by all the wheel motors of all the robots
 */
void ActuatorGestion::apply_torques()
{
	for(unsigned int i=0; i<robot_list.size(); i++)
	{
		robot_list[i]->apply_torques();
	}
}
